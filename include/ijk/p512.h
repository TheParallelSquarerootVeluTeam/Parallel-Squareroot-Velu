#ifndef _IJK_H_
#define _IJK_H_

#ifdef _MONT_C_CODE_
	// The list of the bitlength of each SOP
	static uint64_t bL[] =	{
		2,  3,  3,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,
		7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
		8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10
	};
#endif

#ifdef _ISOG_H_

	// The list of Small Odd Primes (SOPs) is stored such that l_0 < l_1 < ... < l_{n-1}
	static uint64_t L[] =	{
		3,  5,  7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,101,
		103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,
		239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,587
	};

	#ifndef _C_CODE_

		// Sizes for the sets I, J, and K required in the new velusqrt formulae
		#if CORES==1

			static int sizeI[] =	{
				0,  1,  1,  2,  3,  2,  2,  2,  3,  3,  4,  3,  5,  5,  4,  4,  5,  4,  4,  4,  4,  5,  5,  6,  6,
				6,  6,  6,  7,  6,  6,  6,  6,  6,  6,  6,  8,  8,  7,  7,  7,  7,  8,  8,  8,  7,  9,  8,  8,  8,
				8, 10, 10,  8,  8,  8,  8,  8,  8, 10,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12
			};

			static int sizeJ[] =	{
				0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  2,  2,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,
				4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  5,  5,  6,  6,  6,  6,  6,  6,  6,  7,  6,  7,  7,  7,
				7,  6,  6,  8,  8,  8,  8,  8,  8,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 12
			};

			static int sizeK[] =	{
				1,  0,  1,  1,  0,  0,  1,  3,  2,  3,  2,  2,  1,  3,  2,  5,  0,  1,  3,  4,  7,  1,  4,  0,  2,
				3,  5,  6,  0,  3,  5,  8,  9,  2,  3,  6,  1,  3,  2,  5,  6, 11,  0,  2,  3,  7,  3,  1,  2,  4,
				7,  0,  5,  0,  3,  6,  7, 10, 12,  1,  2,  9, 11, 12, 14,  5,  8, 13, 14,  0,  3,  7, 10,  5
			};

		#elif CORES==2

		
			static int sizeI[] =	{
				0,	0,	0,	0,	0,	2,	2,	2,	3,	3,	3,	3,	3,	3,	4,	4,	5,	4,	4,	4,	4,	5,	5,	6,	5,	5,	5,	5,	5,	6,	6,	6,	6,	6,	6,	6,	6,	6,	7,	7,	7,	7,	8,	7,	7,	7,	7,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	9,	9,	9,	9,	9,	9,	9,	9,	9,	9,	9,	10,	10,	12
				};

			static int sizeJ[] =	{
				0,	0,	0,	0,	0,	2,	2,	2,	2,	2,	3,	3,	3,	3,	3,	3,	3,	4,	4,	4,	4,	4,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	7,	7,	7,	7,	7,	7,	7,	7,	7,	7,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	8,	9,	9,	9,	9,	9,	9,	9,	9,	12
				};

			static int sizeK[] =	{
				1,	2,	3,	5,	6,	0,	1,	3,	2,	3,	0,	2,	3,	5,	2,	5,	0,	1,	3,	4,	7,	1,	4,	0,	0,	1,	3,	4,	6,	3,	5,	8,	9,	2,	3,	6,	9,	11,	2,	5,	6,	11,	0,	0,	1,	7,	13,	1,	2,	4,	7,	8,	13,	0,	3,	6,	7,	10,	12,	13,	2,	9,	11,	12,	14,	3,	6,	11,	12,	14,	17,	3,	6,	5
				};

		#elif CORES==4

			static int sizeI[] =	{
				0,	0,	0,	0,	0,	2,	2,	2,	3,	3,	2,	2,	2,	2,	3,	3,	3,	4,	4,	3,	3,	3,	3,	4,	4,	4,	4,	4,	4,	5,	4,	4,	4,	4,	4,	4,	5,	5,	5,	5,	5,	5,	6,	6,	6,	5,	5,	5,	5,	5,	5,	6,	6,	6,	6,	6,	6,	6,	7,	7,	6,	6,	6,	6,	6,	6,	7,	7,	7,	7,	7,	7,	7,	9
			};

			static int sizeJ[] =	{
				0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	2,	2,	2,	2,	2,	2,	2,	2,	2,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	4,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	5,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	6,	8
				};

			static int sizeK[] =	{
				1,	2,	3,	5,	6,	0,	1,	3,	2,	3,	2,	4,	5,	7,	2,	5,	6,	1,	3,	0,	3,	5,	8,	0,	2,	3,	5,	6,	8,	3,	1,	4,	5,	10,	11,	14,	1,	3,	6,	9,	10,	15,	0,	2,	3,	5,	11,	13,	14,	16,	19,	0,	5,	8,	11,	14,	15,	18,	0,	1,	2,	9,	11,	12,	14,	21,	0,	5,	6,	8,	11,	15,	18,	5
				};

		#endif

	#endif

	#define sI_max 12
	#define sJ_max 12
	#define sK_max 294

#endif

#endif /* required framework for the #I, #J, and #K, which is used in new velusqrt fomurlae on CSIDH */